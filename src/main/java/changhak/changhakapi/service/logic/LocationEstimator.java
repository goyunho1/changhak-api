package changhak.changhakapi.service.logic;


import changhak.changhakapi.dto.Location;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.IntStream;
@Service
public class LocationEstimator {

    private Location prevLocation;

    public LocationEstimator() {
        // 기본 위치로 초기화
        this.prevLocation = new Location(37.63266876291934, 127.07916730017462, 1);
    }

    public void setPrevLocation(Location location) {
        this.prevLocation = location;
    }

    // 창학관 x 좌표 배열
    private static double[] x = {
            37.63266876291934, 37.63266197892042, 37.632652940543466, 37.632641653495384,
            37.63263036453167, 37.63262358238455, 37.632614547763524, 37.632605509317244,
            37.63259647657929, 37.6325851875518, 37.63257840343584, 37.63256936684416,
            37.63255807777671, 37.63255129362079, 37.63254226081594, 37.632533226087105,
            37.632521936969226, 37.63251290030045, 37.632503863618346, 37.63249482692293,
            37.632483539670694, 37.63247224856725, 37.632445224777335, 37.63241369798122,
            37.63238442556544, 37.632348391922676, 37.63231686704131, 37.632283087777296,
            37.63225156097451, 37.63221778554324, 37.63218400435744, 37.632154730013106,
            37.63212320703848, 37.632134501925584, 37.63214354050153, 37.632154831524765,
            37.6321661225327, 37.63217741352534, 37.63218870832346, 37.63219549435835,
            37.632204532840504, 37.632227049832494, 37.63221356558527, 37.63223608639586,
            37.63222034776429, 37.63224061611408, 37.63223163676263, 37.63225190130263,
            37.632242925747654, 37.6322519660641, 37.63226325502058, 37.63227229530442,
            37.6322835861329, 37.63229487884558, 37.632303917179904, 37.63231520985887,
            37.63234674053971, 37.632378267424755, 37.63241204677102, 37.63244582611598,
            37.632479603561045, 37.632508876079235, 37.632540404856556, 37.63257643475903,
            37.632607961634555, 37.632639488508794,
            37.63266876291934, 37.63266197892042, 37.632652940543466, 37.632641653495384,
            37.63263036453167, 37.63262358238455, 37.632614547763524, 37.632605509317244,
            37.63259647657929, 37.6325851875518, 37.63257840343584, 37.63256936684416,
            37.63255807777671, 37.63255129362079, 37.63254226081594, 37.632533226087105,
            37.632521936969226, 37.63251290030045, 37.632503863618346, 37.63249482692293,
            37.632483539670694, 37.63247224856725, 37.632445224777335, 37.63241369798122,
            37.63238442556544, 37.632348391922676, 37.63231686704131, 37.632283087777296,
            37.63225156097451, 37.63221778554324, 37.63218400435744, 37.632154730013106,
            37.63212320703848, 37.632134501925584, 37.63214354050153, 37.632154831524765,
            37.6321661225327, 37.63217741352534, 37.63218870832346, 37.63219549435835,
            37.632204532840504, 37.632227049832494, 37.63221356558527, 37.63223608639586,
            37.63222034776429, 37.63224061611408, 37.63223163676263, 37.63225190130263,
            37.632242925747654, 37.6322519660641, 37.63226325502058, 37.63227229530442,
            37.6322835861329, 37.63229487884558, 37.632303917179904, 37.63231520985887,
            37.63234674053971, 37.632378267424755, 37.63241204677102, 37.63244582611598,
            37.632479603561045, 37.632508876079235, 37.632540404856556, 37.63257643475903,
            37.632607961634555, 37.632639488508794,
            37.63218880566136, 37.63219333155779,
            37.63228789494212, 37.63228789494212, 37.63228789494212, 37.63228789494212,
            37.63261468671524,37.63261468671524, 37.63261468671524,
            37.6324362513899,37.6324362513899, 37.6324362513899
    };

    // 창학관 y 좌표 배열
    private static double[] y = {
            127.07916730017462, 127.07920694459204, 127.07924941886608, 127.07928622622583,
            127.07932586582939, 127.07936267795722, 127.07939948768185, 127.07944196190547,
            127.0794759393579, 127.07951557890863, 127.0795552232498, 127.0795948651813,
            127.07963450469958, 127.07967414901546, 127.07970812641501, 127.07974493605751,
            127.07978457553381, 127.07982421740742, 127.07986385927143, 127.07990350112578,
            127.07994030830831, 127.07998277997744, 127.07997425426449, 127.07996289148386,
            127.07994869888049, 127.07994016353868, 127.07992596854429, 127.07991460339166,
            127.07990324066103, 127.07988621105022, 127.07987767816871, 127.07986631787941,
            127.07984929071753, 127.0798011547545, 127.07975868084257, 127.07971620932638,
            127.07967373779728, 127.07963126625532, 127.07958313022421, 127.07954065385412,
            127.0794981798758, 127.07950953282891, 127.07946420260444, 127.07946989106877,
            127.07942739068804, 127.07943307674432, 127.07938775131763, 127.0793991018451,
            127.07934811193516, 127.07930280566582, 127.07926316625968, 127.07921785996763,
            127.07917538829601, 127.0791300843693, 127.0790876102844, 127.07904230633203,
            127.07904800422045, 127.0790593666045, 127.07907073138472, 127.07908209617528,
            127.07909629322536, 127.07911048551274, 127.07911901569645, 127.07913321516978,
            127.07914457762494, 127.07915594008972,
            127.07916730017462, 127.07920694459204, 127.07924941886608, 127.07928622622583,
            127.07932586582939, 127.07936267795722, 127.07939948768185, 127.07944196190547,
            127.0794759393579, 127.07951557890863, 127.0795552232498, 127.0795948651813,
            127.07963450469958, 127.07967414901546, 127.07970812641501, 127.07974493605751,
            127.07978457553381, 127.07982421740742, 127.07986385927143, 127.07990350112578,
            127.07994030830831, 127.07998277997744, 127.07997425426449, 127.07996289148386,
            127.07994869888049, 127.07994016353868, 127.07992596854429, 127.07991460339166,
            127.07990324066103, 127.07988621105022, 127.07987767816871, 127.07986631787941,
            127.07984929071753, 127.0798011547545, 127.07975868084257, 127.07971620932638,
            127.07967373779728, 127.07963126625532, 127.07958313022421, 127.07954065385412,
            127.0794981798758, 127.07950953282891, 127.07946420260444, 127.07946989106877,
            127.07942739068804, 127.07943307674432, 127.07938775131763, 127.0793991018451,
            127.07934811193516, 127.07930280566582, 127.07926316625968, 127.07921785996763,
            127.07917538829601, 127.0791300843693, 127.0790876102844, 127.07904230633203,
            127.07904800422045, 127.0790593666045, 127.07907073138472, 127.07908209617528,
            127.07909629322536, 127.07911048551274, 127.07911901569645, 127.07913321516978,
            127.07914457762494, 127.07915594008972,
            127.0794386860781, 127.07940753625172,
            127.07946711399507,127.07946711399507,127.07946711399507,127.07946711399507,
            127.07919273311532,127.07919273311532,127.07919273311532,
            127.07992043190616,127.07992043190616,127.07992043190616
    };


    public double[] estimateLoc(double[] distances, int K, double sigma) {
        double prevX = prevLocation.getLatitude();
        double prevY = prevLocation.getLongitude();

        // 유클리드 거리에 기반한 가중치 계산
        double[] weightedDistances = new double[distances.length];
        for (int i = 0; i < distances.length; i++) {
            double distanceToPrev = Math.pow(x[i] - prevX, 2) + Math.pow(y[i] - prevY, 2);
            double weight = Math.exp(distanceToPrev / (4 * sigma * sigma));
            weightedDistances[i] = distances[i] * weight;
        }

        // 수정된 유클리드 거리(weightedDistances)를 기반으로 가까운 K개의 이웃 선정
        int[] indices = IntStream.range(0, weightedDistances.length)
                .boxed()
                .sorted(Comparator.comparingDouble(i -> weightedDistances[i]))
                .mapToInt(i -> i)
                .toArray();

        int[] closestIndices = Arrays.copyOf(indices, K);

        double[] minDistances = new double[K];
        for (int i = 0; i < K; i++) {
            minDistances[i] = weightedDistances[closestIndices[i]];
        }

        double totalWeight = 0;
        for (double d : minDistances) {
            totalWeight += 1.0 / d;
        }

        double x_hat = 0;
        double y_hat = 0;

        for (int i = 0; i < K; i++) {
            int index = closestIndices[i];
            x_hat += x[index] * (1.0 / minDistances[i]);
            y_hat += y[index] * (1.0 / minDistances[i]);
        }

        x_hat /= totalWeight;
        y_hat /= totalWeight;

        // 층 정보를 계산
        double floor = 0;
        int a = closestIndices[0] + 1;
        if (a <= 132 && a >= 67) {
            floor = 2;
        } else if (a == 134 || a == 133 || (a >= 1 && a <= 66)) {
            floor = 1;
        }

        return new double[]{x_hat, y_hat, floor};
    }
}


    /*
    //상상관
    private static double[] x = {
            37.6310688239692,
            37.63106205117987,
            37.6310440526506,
            37.631039530400656,
            37.6310215299453,
            37.631017013471,
            37.63106653877504,
            37.63105976790285,
            37.631057498099324,
            37.63105297775494,
            37.631035010070946,
            37.63103048781056,
            37.63102596939848,
            37.63102595398168,
            37.631043991029,
            37.6310439544083,
            37.6310394359843,
            37.631037168091,
            37.6310349040523,
            37.6310303836884,
            37.6310259404884,
            37.6310236745288,
            37.6310191522452,
            37.6310146357444,
            37.6310146203075,
            37.6310348751025,
            37.6310303547304,
            37.6310280887484,
            37.631003346412,
            37.6310010765736,
            37.6309988105927,
            37.6310145874896,
            37.6310844447294,
            37.6310709318816,
            37.6310529141078,
            37.6310754213663,
            37.6310731534577,
            37.6310688008668,
            37.6310665329968,
            37.6310620145862,
            37.6310597486352,
            37.6310574807532,
            37.6310529623321,
            37.6310506963706,
            37.6310484304058,
            37.6310461625081,
            37.631041642143,
            37.6310393761673,
            37.6310348577253,
            37.6310325917428,
            37.6310350177733,
            37.6310327518304,
            37.6310304839577,
            37.6310259655446,
            37.6310236995912,
            37.6310214336345,
            37.6310169152115,
            37.6310168997822,
            37.631014633815,
            37.6310078629185,
            37.6310055950143,
            37.6310033290366,
            37.6310010611242,
            37.6310507869396,
            37.6310439929558,
            37.6310349503403,
            37.6310236262995,
            37.6310168380215,
            37.6310799976717

    };
    //상상관
    private static double[] y = {
            127.080188026315,
            127.08021067661774,
            127.080179503109,
            127.08020498802004,
            127.080176646716,
            127.080193635038,
            127.08023617121918,
            127.0802559893211,
            127.08028147665543,
            127.08030412936942,
            127.08022764073326,
            127.08025312563785,
            127.08027294615142,
            127.08029560370322,
            127.080270133338,
            127.080323945037,
            127.08034376555,
            127.08036642068,
            127.08038341142,
            127.080406064121,
            127.080315429061,
            127.080335251994,
            127.080360736888,
            127.080377725198,
            127.080400382747,
            127.080425894335,
            127.080448547033,
            127.080468369963,
            127.080417363772,
            127.080442851082,
            127.080462674005,
            127.080448530037,
            127.080403290167,
            127.080400443412,
            127.080397591804,
            127.080423105832,
            127.08044576097,
            127.080222012662,
            127.080244667805,
            127.080264488329,
            127.080284311273,
            127.080306966411,
            127.080326786929,
            127.080346609869,
            127.080366432808,
            127.08038908794,
            127.080411740644,
            127.080431563578,
            127.080451384084,
            127.080471207015,
            127.080216311955,
            127.080236134894,
            127.080258790026,
            127.080278610539,
            127.080298433473,
            127.080318256406,
            127.080338076913,
            127.080360734463,
            127.080380557392,
            127.080400375467,
            127.080423030586,
            127.08044285351,
            127.080465508627,
            127.080213496708,
            127.080267301144,
            127.080315438757,
            127.080406056841,
            127.080451364658,
            127.080318319433

    };
    */



